#! <%= @ruby_binary %>
require "curses"
include Curses

def draw_menu(courses, menu, active_index=nil)
  menu.setpos(1, 15)
  menu.attrset(A_UNDERLINE)
  menu.addstr 'Please Choose a course:'

  courses.each_with_index do | (course, manifest), index |
    menu.setpos(index + 3, 4)
    menu.attrset(index == active_index ? A_STANDOUT : A_NORMAL)
    menu.addstr course
  end

  menu.setpos(courses.length + 4, 4)
  menu.attrset(A_UNDERLINE)
  menu.addstr 'Press X to exit'
end

def draw_info(menu, text)
  menu.setpos(1, 50)
  menu.attrset(A_NORMAL)
  menu.addstr text
end

courses = {
  'Resources'                                   => 'resources.pp',
  'Relationships'                               => 'relationships.pp',
  'An Introduction to Hiera'                    => 'hiera_intro.pp',
  'Puppet Lint'                                 => 'puppet_lint.pp',
  'Inheritance'                                 => 'inheritance.pp',
  'Autoloading'                                 => 'autoloading.pp',
  'An Introduction to Facter'                   => 'facter_intro.pp',
  'An Introduction to Vim'                      => 'vim_intro.pp',
  'An Introduction to the Linux Command Line'   => 'cli_intro.pp',
  'Classes'                                     => 'classes.pp',
  'Testing'                                     => 'testing.pp',
  'Testing Puppet: Validating your Puppet Code' => 'validating.pp',
  'Practical Hiera Usage'                       => 'hiera.pp',
  'Writing Your First Module'                   => 'module.pp',
  'Managing Puppet Code'                        => 'code.pp',
  'Infrastructure Design Using Puppet Modules'  => 'infrastructure.pp',
  'Troubleshooting'                             => 'troubleshooting.pp',
  'Puppet 4 Parser'                             => 'parser.pp',
  'Testing Puppet: Smoke Tests'                 => 'smoke_test.pp',
  'Testing Puppet: Unit Tests'                  => 'unit_test.pp',
}
courses = courses.sort_by{|k,v|k}

begin
  init_screen
  noecho
  nonl
  cbreak

  menu = Window.new(48,152,0,2)
  menu.box('|','-')
  menu.keypad = true

  position = 0
  draw_menu(courses, menu, position)
  while ch = menu.getch
    case ch
    when KEY_UP, 'w','k'
      position -= 1
    when KEY_DOWN, 's','j'
      position += 1
    when KEY_ENTER, ' ', 13
      close_screen
      puts "Applying manifest #{courses[position][1]} for #{courses[position][0]}"
      %x(puppet apply <%= @codedir %>/modules/course_selector/tests/#{courses[position][1]})
      exit
    when 'x','X'
      exit
    end

    position = courses.size - 1 if position < 0
    position = 0 if position >= courses.size
    draw_menu(courses, menu, position)
  end

ensure
  close_screen
  exec ('bash')
end

